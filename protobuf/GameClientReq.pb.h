// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameClientReq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameClientReq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameClientReq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameClientReq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameClientReq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameClientReq_2eproto;
namespace protoAuth {
class GameClientReq;
struct GameClientReqDefaultTypeInternal;
extern GameClientReqDefaultTypeInternal _GameClientReq_default_instance_;
}  // namespace protoAuth
PROTOBUF_NAMESPACE_OPEN
template<> ::protoAuth::GameClientReq* Arena::CreateMaybeMessage<::protoAuth::GameClientReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoAuth {

enum GameClientReq_eMessageType : int {
  GameClientReq_eMessageType_GAMEWON = 0,
  GameClientReq_eMessageType_GAMELOST = 1,
  GameClientReq_eMessageType_HIT = 2,
  GameClientReq_eMessageType_NOTHIT = 3,
  GameClientReq_eMessageType_PLAYER1TURN = 4,
  GameClientReq_eMessageType_PLAYER2TURN = 5
};
bool GameClientReq_eMessageType_IsValid(int value);
constexpr GameClientReq_eMessageType GameClientReq_eMessageType_eMessageType_MIN = GameClientReq_eMessageType_GAMEWON;
constexpr GameClientReq_eMessageType GameClientReq_eMessageType_eMessageType_MAX = GameClientReq_eMessageType_PLAYER2TURN;
constexpr int GameClientReq_eMessageType_eMessageType_ARRAYSIZE = GameClientReq_eMessageType_eMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameClientReq_eMessageType_descriptor();
template<typename T>
inline const std::string& GameClientReq_eMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameClientReq_eMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameClientReq_eMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameClientReq_eMessageType_descriptor(), enum_t_value);
}
inline bool GameClientReq_eMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameClientReq_eMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameClientReq_eMessageType>(
    GameClientReq_eMessageType_descriptor(), name, value);
}
// ===================================================================

class GameClientReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoAuth.GameClientReq) */ {
 public:
  inline GameClientReq() : GameClientReq(nullptr) {}
  ~GameClientReq() override;
  explicit constexpr GameClientReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientReq(const GameClientReq& from);
  GameClientReq(GameClientReq&& from) noexcept
    : GameClientReq() {
    *this = ::std::move(from);
  }

  inline GameClientReq& operator=(const GameClientReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientReq& operator=(GameClientReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientReq* internal_default_instance() {
    return reinterpret_cast<const GameClientReq*>(
               &_GameClientReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameClientReq& a, GameClientReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientReq* New() const final {
    return new GameClientReq();
  }

  GameClientReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameClientReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameClientReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoAuth.GameClientReq";
  }
  protected:
  explicit GameClientReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameClientReq_eMessageType eMessageType;
  static constexpr eMessageType GAMEWON =
    GameClientReq_eMessageType_GAMEWON;
  static constexpr eMessageType GAMELOST =
    GameClientReq_eMessageType_GAMELOST;
  static constexpr eMessageType HIT =
    GameClientReq_eMessageType_HIT;
  static constexpr eMessageType NOTHIT =
    GameClientReq_eMessageType_NOTHIT;
  static constexpr eMessageType PLAYER1TURN =
    GameClientReq_eMessageType_PLAYER1TURN;
  static constexpr eMessageType PLAYER2TURN =
    GameClientReq_eMessageType_PLAYER2TURN;
  static inline bool eMessageType_IsValid(int value) {
    return GameClientReq_eMessageType_IsValid(value);
  }
  static constexpr eMessageType eMessageType_MIN =
    GameClientReq_eMessageType_eMessageType_MIN;
  static constexpr eMessageType eMessageType_MAX =
    GameClientReq_eMessageType_eMessageType_MAX;
  static constexpr int eMessageType_ARRAYSIZE =
    GameClientReq_eMessageType_eMessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eMessageType_descriptor() {
    return GameClientReq_eMessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& eMessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eMessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eMessageType_Name.");
    return GameClientReq_eMessageType_Name(enum_t_value);
  }
  static inline bool eMessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eMessageType* value) {
    return GameClientReq_eMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIValueFieldNumber = 2,
    kJValueFieldNumber = 3,
  };
  // required .protoAuth.GameClientReq.eMessageType id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::protoAuth::GameClientReq_eMessageType id() const;
  void set_id(::protoAuth::GameClientReq_eMessageType value);
  private:
  ::protoAuth::GameClientReq_eMessageType _internal_id() const;
  void _internal_set_id(::protoAuth::GameClientReq_eMessageType value);
  public:

  // required int32 iValue = 2;
  bool has_ivalue() const;
  private:
  bool _internal_has_ivalue() const;
  public:
  void clear_ivalue();
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue() const;
  void set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ivalue() const;
  void _internal_set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 jValue = 3;
  bool has_jvalue() const;
  private:
  bool _internal_has_jvalue() const;
  public:
  void clear_jvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 jvalue() const;
  void set_jvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jvalue() const;
  void _internal_set_jvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protoAuth.GameClientReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 jvalue_;
  friend struct ::TableStruct_GameClientReq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameClientReq

// required .protoAuth.GameClientReq.eMessageType id = 1;
inline bool GameClientReq::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameClientReq::has_id() const {
  return _internal_has_id();
}
inline void GameClientReq::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::protoAuth::GameClientReq_eMessageType GameClientReq::_internal_id() const {
  return static_cast< ::protoAuth::GameClientReq_eMessageType >(id_);
}
inline ::protoAuth::GameClientReq_eMessageType GameClientReq::id() const {
  // @@protoc_insertion_point(field_get:protoAuth.GameClientReq.id)
  return _internal_id();
}
inline void GameClientReq::_internal_set_id(::protoAuth::GameClientReq_eMessageType value) {
  assert(::protoAuth::GameClientReq_eMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void GameClientReq::set_id(::protoAuth::GameClientReq_eMessageType value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoAuth.GameClientReq.id)
}

// required int32 iValue = 2;
inline bool GameClientReq::_internal_has_ivalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameClientReq::has_ivalue() const {
  return _internal_has_ivalue();
}
inline void GameClientReq::clear_ivalue() {
  ivalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientReq::_internal_ivalue() const {
  return ivalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientReq::ivalue() const {
  // @@protoc_insertion_point(field_get:protoAuth.GameClientReq.iValue)
  return _internal_ivalue();
}
inline void GameClientReq::_internal_set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ivalue_ = value;
}
inline void GameClientReq::set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ivalue(value);
  // @@protoc_insertion_point(field_set:protoAuth.GameClientReq.iValue)
}

// required int32 jValue = 3;
inline bool GameClientReq::_internal_has_jvalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameClientReq::has_jvalue() const {
  return _internal_has_jvalue();
}
inline void GameClientReq::clear_jvalue() {
  jvalue_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientReq::_internal_jvalue() const {
  return jvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientReq::jvalue() const {
  // @@protoc_insertion_point(field_get:protoAuth.GameClientReq.jValue)
  return _internal_jvalue();
}
inline void GameClientReq::_internal_set_jvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  jvalue_ = value;
}
inline void GameClientReq::set_jvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jvalue(value);
  // @@protoc_insertion_point(field_set:protoAuth.GameClientReq.jValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protoAuth

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protoAuth::GameClientReq_eMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protoAuth::GameClientReq_eMessageType>() {
  return ::protoAuth::GameClientReq_eMessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameClientReq_2eproto
